/*
	CADET - Center for Advances in Digital Entertainment Technologies
	Copyright 2011 Fachhochschule Salzburg GmbH
		http://www.cadet.at

	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

		http://www.apache.org/licenses/LICENSE-2.0

	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
*/

#pragma once

#include "helpers/_2RealStdIncludes.h"
#include "helpers/_2RealVersion.h"
#include "helpers/_2RealPath.h"

namespace _2Real
{

	class SharedLibrary;
	class SharedTypeMetainfo;
	class SharedServiceMetainfo;
	class TypeCollection;
	class MetainfoId;

	class SharedLibraryMetainfo
	{

	public:

		~SharedLibraryMetainfo();

		static std::shared_ptr< SharedLibraryMetainfo > make( std::shared_ptr< SharedLibrary >, Path const&, std::shared_ptr< TypeCollection > );

		std::string 			getName() const;
		Path					getFilePath() const;
		std::string				getDescription() const;
		std::string				getAuthor() const;
		std::string				getContact() const;
		std::string				getCategory() const;
		Version					getVersion() const;

		void					setDescription( std::string const& );
		void					setAuthor( std::string const& );
		void					setContact( std::string const& );
		void					setCategory( std::string const& );
		void					setVersion( Version const& );

		std::vector< std::shared_ptr< const SharedServiceMetainfo > >	getServiceMetainfos() const;
		std::vector< std::shared_ptr< const SharedTypeMetainfo > >		getTypeMetainfos() const;

		void					exportType( std::string const& );
		void					exportBlock( std::string const&, const bool, std::vector< std::string > const&, std::vector< std::string > const&, std::vector< std::string > const& );

		std::shared_ptr< const MetainfoId > getId() const;

	private:

		SharedLibraryMetainfo( Path const& absPath, std::shared_ptr< const MetainfoId > id, std::shared_ptr< TypeCollection > );

		SharedLibraryMetainfo( SharedLibraryMetainfo const& ) = delete;
		SharedLibraryMetainfo& operator=( SharedLibraryMetainfo const& ) = delete;

		// basic info, bundle metainfo provides setters here
		std::string mCategory;
		std::string mDescription;
		std::string mAuthor;
		std::string mContact;
		Version		mVersion;
		Path		mPath;

		// metainfo id as generated by the framework
		std::shared_ptr< const MetainfoId >		mId;

		typedef std::map< std::string, std::shared_ptr< SharedServiceMetainfo > >	ServiceMetainfos;
		typedef std::map< std::string, std::shared_ptr< SharedTypeMetainfo > >		TypeMetainfos;

		struct TypePreinfo
		{
			std::string mName;
		};

		struct BlockPreinfo
		{
			std::string mName;
			bool mIsSingleton;
			std::vector< std::string > mInlets;
			std::vector< std::string > mOutlets;
			std::vector< std::string > mParameters;
		};

		typedef std::vector< TypePreinfo >	TypePreinfos;
		typedef std::vector< BlockPreinfo >	BlockPreinfos;

		TypePreinfos		mTypePreinfos;
		BlockPreinfos		mBlockPreinfos;

		std::weak_ptr< TypeCollection >		mTypeCollection;
		TypeMetainfos						mTypes;
		ServiceMetainfos					mBlocks;

	};

}